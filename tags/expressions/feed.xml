<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Expressions on Recurse.se</title>
    <link>https://recurse.se/tags/expressions/</link>
    <description>Recent content in Expressions on Recurse.se</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 16 Nov 2023 17:35:42 +0100</lastBuildDate>
    <atom:link href="https://recurse.se/tags/expressions/feed.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Statements vs Expressions</title>
      <link>https://recurse.se/2023/11/statements-vs-expressions/</link>
      <pubDate>Thu, 16 Nov 2023 17:35:42 +0100</pubDate>
      <guid>https://recurse.se/2023/11/statements-vs-expressions/</guid>
      <description>Programming languages are sometimes categorized into expression-oriented or statement-oriented. Statements typically do something, whereas expressions produce values.
These two categories are not clear-cut, and languages can and do support both styles but tend to lean one way or the other. As a rule of thumb we can understand the difference, and categorize the language, by taking a look at how one writes conditionals (a.k.a. if statements) in the language.
Statement oriented if Link to heading A very common form of the if statement that you know and love enables you to choose which of two actions to perform:</description>
    </item>
  </channel>
</rss>
